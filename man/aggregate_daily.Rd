% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aggregate.R
\name{aggregate_daily}
\alias{aggregate_daily}
\title{Aggregate Daily data to a monthly or annual timescale.}
\usage{
aggregate_daily(
  r,
  variable,
  monthly = TRUE,
  agg_func = "mean",
  filename = NULL,
  ...
)
}
\arguments{
\item{r}{A multilayer \code{terra::rast} of daily data spanning at least one month.
The raster must have a time attributed assigned with \code{terra::time}.}

\item{variable}{A string giving the name of the variable being created.}

\item{monthly}{A boolean specifying whether monthly or annual averages should
be computed.}

\item{agg_func}{The function used to aggregate the daily data. Defaults to
"mean"}

\item{filename}{A path/name to save the file as. If left empty, nothing will
be written to disk.}

\item{...}{Additional arguments that will be passed to \code{terra::writeRaster}.}
}
\value{
A \code{terra::rast} with monthly data.
}
\description{
Aggregate Daily data to a monthly or annual timescale.
}
\examples{
# Make example raster
r <- matrix(1:100, 10, 10) |>
  terra::rast()

# repeat 31 times
r <-  r[[rep(1, 31)]]

# Assign dates
terra::time(r) <- seq.Date(
  as.Date("2022-01-01"), as.Date("2022-01-31"), by = 'days'
)

# Calculate the monthly mean.
aggregate_daily(r, 'example', TRUE, 'mean')
# Make example raster
r <- matrix(1:100, 10, 10) |>
  terra::rast()

# repeat 365 times
r <-  r[[rep(1, 365)]]

# Assign dates
terra::time(r) <- seq.Date(
  as.Date("2022-01-01"), as.Date("2022-12-31"), by = 'days'
)

# Calculate the monthly mean.
aggregate_daily(r, 'example', FALSE, 'mean')
}
